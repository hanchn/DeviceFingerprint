{"code":"/**\n * 计算字符串的哈希值\n * @param str 输入字符串\n * @returns 哈希值字符串\n */\nexport function hashString(str) {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n        const char = str.charCodeAt(i);\n        hash = ((hash << 5) - hash) + char;\n        hash = hash & hash;\n    }\n    return hash.toString();\n}\n/**\n * 计算对象的哈希值（32 个字符的十六进制字符串）\n * @param obj 输入对象\n * @returns 哈希值字符串\n */\nexport async function hashObject(obj) {\n    const str = JSON.stringify(obj);\n    if (window.crypto && window.crypto.subtle) {\n        const buffer = new TextEncoder().encode(str);\n        const digest = await window.crypto.subtle.digest('SHA-256', buffer);\n        const hashArray = Array.from(new Uint8Array(digest));\n        // 使用完整的 16 个字节，生成 32 个字符的十六进制字符串\n        const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\n        // 确保返回 32 个字符\n        return hashHex.slice(0, 32);\n    }\n    else {\n        // fallback: 使用简单 hashString\n        return hashString(str);\n    }\n}\n/**\n * 计算 Canvas 指纹\n * @param canvas Canvas 元素\n * @returns 指纹字符串\n */\nexport function getCanvasFingerprint(canvas) {\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n        return '';\n    }\n    // 绘制文本\n    ctx.textBaseline = 'top';\n    ctx.font = '14px Arial';\n    ctx.fillStyle = '#f60';\n    ctx.fillRect(125, 1, 62, 20);\n    ctx.fillStyle = '#069';\n    ctx.fillText('DeviceFingerprint', 2, 15);\n    ctx.fillStyle = 'rgba(102, 204, 0, 0.7)';\n    ctx.fillText('DeviceFingerprint', 4, 17);\n    // 获取图像数据\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    return hashString(imageData.data.toString());\n}\n/**\n * 计算 WebGL 指纹\n * @param canvas Canvas 元素\n * @returns 指纹字符串\n */\nexport function getWebGLFingerprint(canvas) {\n    const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n    if (!gl) {\n        return '';\n    }\n    // 类型断言为 WebGLRenderingContext\n    const webglContext = gl;\n    const debugInfo = webglContext.getExtension('WEBGL_debug_renderer_info');\n    if (!debugInfo) {\n        return '';\n    }\n    const vendor = webglContext.getParameter(debugInfo.UNMASKED_VENDOR_WEBGL);\n    const renderer = webglContext.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL);\n    return hashString(`${vendor}~${renderer}`);\n}\n//# sourceMappingURL=hash.js.map","references":[],"map":"{\"version\":3,\"file\":\"hash.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/utils/hash.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/yuanjing/Desktop/DeviceFingerprint/node_modules/.cache/rollup-plugin-typescript2/placeholder/utils/hash.d.ts","writeByteOrderMark":false,"text":"/**\n * 计算字符串的哈希值\n * @param str 输入字符串\n * @returns 哈希值字符串\n */\nexport declare function hashString(str: string): string;\n/**\n * 计算对象的哈希值（32 个字符的十六进制字符串）\n * @param obj 输入对象\n * @returns 哈希值字符串\n */\nexport declare function hashObject(obj: any): Promise<string>;\n/**\n * 计算 Canvas 指纹\n * @param canvas Canvas 元素\n * @returns 指纹字符串\n */\nexport declare function getCanvasFingerprint(canvas: HTMLCanvasElement): string;\n/**\n * 计算 WebGL 指纹\n * @param canvas Canvas 元素\n * @returns 指纹字符串\n */\nexport declare function getWebGLFingerprint(canvas: HTMLCanvasElement): string;\n"}}
