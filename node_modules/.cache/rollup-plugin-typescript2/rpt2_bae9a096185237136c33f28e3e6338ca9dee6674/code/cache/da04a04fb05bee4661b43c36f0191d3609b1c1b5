{"code":"import { Logger } from '../utils/logger';\nimport { hashObject } from '../utils/hash';\nimport { BasicCollector, ScreenCollector, HardwareCollector, NetworkCollector, FeaturesCollector, DeviceCollector } from '../collectors';\n/**\n * 设备指纹类\n * 用于生成和管理设备指纹\n */\nexport class DeviceFingerprint {\n    /**\n     * 创建设备指纹实例\n     * @param options 配置选项\n     */\n    constructor(options = {}) {\n        this.fingerprint = null;\n        this.components = {};\n        this.options = {\n            cache: true,\n            timeout: 5000,\n            debug: false,\n            ...options\n        };\n        this.logger = new Logger(this.options.debug);\n    }\n    /**\n     * 生成设备指纹\n     * @returns 设备指纹字符串\n     * @throws 如果生成过程中发生错误\n     */\n    async generate() {\n        if (this.fingerprint && this.options.cache) {\n            this.logger.log('Using cached fingerprint');\n            return this.fingerprint;\n        }\n        try {\n            await this.collectComponents();\n            this.fingerprint = hashObject(this.components);\n            this.logger.log('Generated new fingerprint', this.fingerprint);\n            return this.fingerprint;\n        }\n        catch (error) {\n            this.logger.error('Failed to generate fingerprint', error);\n            throw error;\n        }\n    }\n    /**\n     * 收集所有组件信息\n     * @private\n     */\n    async collectComponents() {\n        const collectors = {\n            basic: BasicCollector,\n            screen: ScreenCollector,\n            hardware: HardwareCollector,\n            network: NetworkCollector,\n            features: FeaturesCollector,\n            device: DeviceCollector\n        };\n        for (const [key, collector] of Object.entries(collectors)) {\n            const componentKey = key;\n            if (!this.options.components || this.options.components.includes(componentKey)) {\n                try {\n                    const result = await collector.collect();\n                    this.components[componentKey] = result;\n                }\n                catch (error) {\n                    this.logger.error(`Failed to collect ${key} information`, error);\n                    this.components[componentKey] = 'error';\n                }\n            }\n        }\n    }\n    /**\n     * 获取收集的组件信息\n     * @returns 组件信息对象\n     */\n    getComponents() {\n        return this.components;\n    }\n}\n// 导出默认实例\nconst deviceFingerprint = new DeviceFingerprint();\nexport default deviceFingerprint;\n//# sourceMappingURL=deviceFingerprint.js.map","references":["/Users/yuanjing/Desktop/DeviceFingerprint/src/types/index.ts","/Users/yuanjing/Desktop/DeviceFingerprint/src/utils/logger.ts","/Users/yuanjing/Desktop/DeviceFingerprint/src/utils/hash.ts","/Users/yuanjing/Desktop/DeviceFingerprint/src/collectors/index.ts"],"map":"{\"version\":3,\"file\":\"deviceFingerprint.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/core/deviceFingerprint.ts\"],\"names\":[],\"mappings\":\"AACA,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAC;AACzC,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EACL,cAAc,EACd,eAAe,EACf,iBAAiB,EACjB,gBAAgB,EAChB,iBAAiB,EACjB,eAAe,EAChB,MAAM,eAAe,CAAC;AAEvB;;;GAGG;AACH,MAAM,OAAO,iBAAiB;IAM5B;;;OAGG;IACH,YAAY,UAAoC,EAAE;QAT1C,gBAAW,GAAkB,IAAI,CAAC;QAClC,eAAU,GAAmC,EAAE,CAAC;QAStD,IAAI,CAAC,OAAO,GAAG;YACb,KAAK,EAAE,IAAI;YACX,OAAO,EAAE,IAAI;YACb,KAAK,EAAE,KAAK;YACZ,GAAG,OAAO;SACX,CAAC;QACF,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC/C,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,QAAQ;QACZ,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;YAC3C,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;YAC5C,OAAO,IAAI,CAAC,WAAW,CAAC;QAC1B,CAAC;QAED,IAAI,CAAC;YACH,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;YAC/B,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC/C,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,2BAA2B,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;YAC/D,OAAO,IAAI,CAAC,WAAW,CAAC;QAC1B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;YAC3D,MAAM,KAAK,CAAC;QACd,CAAC;IACH,CAAC;IAED;;;OAGG;IACK,KAAK,CAAC,iBAAiB;QAC7B,MAAM,UAAU,GAAG;YACjB,KAAK,EAAE,cAAc;YACrB,MAAM,EAAE,eAAe;YACvB,QAAQ,EAAE,iBAAiB;YAC3B,OAAO,EAAE,gBAAgB;YACzB,QAAQ,EAAE,iBAAiB;YAC3B,MAAM,EAAE,eAAe;SACf,CAAC;QAEX,KAAK,MAAM,CAAC,GAAG,EAAE,SAAS,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,CAAC;YAC1D,MAAM,YAAY,GAAG,GAAkC,CAAC;YACxD,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,CAAC;gBAC/E,IAAI,CAAC;oBACH,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,OAAO,EAAE,CAAC;oBACxC,IAAI,CAAC,UAAkB,CAAC,YAAY,CAAC,GAAG,MAAM,CAAC;gBAClD,CAAC;gBAAC,OAAO,KAAK,EAAE,CAAC;oBACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,qBAAqB,GAAG,cAAc,EAAE,KAAK,CAAC,CAAC;oBAChE,IAAI,CAAC,UAAkB,CAAC,YAAY,CAAC,GAAG,OAAO,CAAC;gBACnD,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;IAED;;;OAGG;IACH,aAAa;QACX,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;CACF;AAED,SAAS;AACT,MAAM,iBAAiB,GAAG,IAAI,iBAAiB,EAAE,CAAC;AAClD,eAAe,iBAAiB,CAAC\"}","dts":{"name":"/Users/yuanjing/Desktop/DeviceFingerprint/node_modules/.cache/rollup-plugin-typescript2/placeholder/core/deviceFingerprint.d.ts","writeByteOrderMark":false,"text":"import { DeviceFingerprintOptions, FingerprintComponents } from '../types';\n/**\n * 设备指纹类\n * 用于生成和管理设备指纹\n */\nexport declare class DeviceFingerprint {\n    private fingerprint;\n    private components;\n    private options;\n    private logger;\n    /**\n     * 创建设备指纹实例\n     * @param options 配置选项\n     */\n    constructor(options?: DeviceFingerprintOptions);\n    /**\n     * 生成设备指纹\n     * @returns 设备指纹字符串\n     * @throws 如果生成过程中发生错误\n     */\n    generate(): Promise<string>;\n    /**\n     * 收集所有组件信息\n     * @private\n     */\n    private collectComponents;\n    /**\n     * 获取收集的组件信息\n     * @returns 组件信息对象\n     */\n    getComponents(): Partial<FingerprintComponents>;\n}\ndeclare const deviceFingerprint: DeviceFingerprint;\nexport default deviceFingerprint;\n"}}
